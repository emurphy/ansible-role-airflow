#! /bin/sh
### BEGIN INIT INFO
# Provides:           airflow-scheduler
# Required-Start:     $remote_fs $network
# Required-Stop:      $remote_fs $network
# Default-Start:      2 3 4 5
# Default-Stop:       0 1 6
# Short-Description:  Start airflow scheduler
### END INIT INFO

# {{ ansible_managed }}

# Airflow service vars
AIRFLOW_HOME="{{ airflow_config.core.home }}"
AIRFLOW_CONFIG="${AIRFLOW_HOME}/airflow.cfg"
AIRFLOW_BINARY_PATH="{{ airflow_virtualenv ~ '/bin' }}"
AIRFLOW_SCHEDULER_RUNS="{{ airflow_scheduler_runs }}"
AIRFLOW_SCHEDULER_RUN_DURATION="{{ airflow_scheduler_run_duration }}"
AIRFLOW_SCHEDULER_PID_FILE="{{ airflow_scheduler_pid_file }}"
AIRFLOW_SCHEDULER_LOG_FILE="{{ airflow_scheduler_log_file }}"

# Init common vars
NAME="airflow-scheduler"
DESC="airflow-scheduler"
PATH="${AIRFLOW_BINARY_PATH}:/bin:/usr/bin:/sbin:/usr/sbin"
DAEMON="${AIRFLOW_BINARY_PATH}/airflow"
DAEMON_USER="{{ airflow_user_name }}"
DAEMON_OPTS="scheduler --daemon --num_runs ${AIRFLOW_SCHEDULER_RUNS} --run-duration ${AIRFLOW_SCHEDULER_RUN_DURATION} --pid ${AIRFLOW_SCHEDULER_PID_FILE} --log-file ${AIRFLOW_SCHEDULER_LOG_FILE}"
START_TIME=3
DIE_TIME=3

# Check binary exists
test -x $DAEMON || exit 1

# Load init functions
. /lib/lsb/init-functions

# Airflow folder for pid file
if [ ! -d "{{ airflow_scheduler_pid_file | dirname }}" ]; then
  mkdir "{{ airflow_scheduler_pid_file | dirname }}"
fi

# Additional functions
running_pid() {
  pid=$1
  name=$2
  [ -z "$pid" ] && return 1
  [ ! -d /proc/$pid ] &&  return 1
  cmd=`awk '/Name:/ {print $2}' /proc/$pid/status`
  [ "$cmd" != "$name" ] &&  return 1
  return 0
}

running() {
  [ ! -f "$AIRFLOW_SCHEDULER_PID_FILE" ] && return 1
  pid=`cat $AIRFLOW_SCHEDULER_PID_FILE`
  running_pid $pid "airflow" || return 1
  return 0
}

start_server() {
  start-stop-daemon --start --quiet --pidfile $AIRFLOW_SCHEDULER_PID_FILE \
    --chuid $DAEMON_USER \
    --exec $DAEMON -- $DAEMON_OPTS
  errcode=$?
  return $errcode
}

stop_server() {
  start-stop-daemon --stop --quiet --pidfile $AIRFLOW_SCHEDULER_PID_FILE
  errcode=$?
  return $errcode
}

case "$1" in
  start)
    log_daemon_msg "Starting $DESC " "$NAME"
    if running ;  then
        log_progress_msg "apparently already running"
        log_end_msg 0
        exit 0
    fi
    if start_server ; then
        [ -n "$START_TIME" ] && sleep $START_TIME # Wait some time
        if  running ;  then
            log_end_msg 0
        else
            log_end_msg 1
        fi
    else
        log_end_msg 1
    fi
    ;;
  stop)
    log_daemon_msg "Stopping $DESC" "$NAME"
    if running ; then
      errcode=0
      stop_server || errcode=$?
      log_end_msg $errcode
    else
      log_progress_msg "apparently not running"
      log_end_msg 0
      exit 0
    fi
    ;;
  restart)
    log_daemon_msg "Restarting $DESC" "$NAME"
    errcode=0
    if running ; then
      stop_server || errcode=$?
      [ -n "$DIE_TIME" ] && sleep $DIE_TIME
    fi
    start_server || errcode=$?
    [ -n "$START_TIME" ] && sleep $START_TIME
    running || errcode=$?
    log_end_msg $errcode
    ;;
  status)
    log_daemon_msg "Checking status of $DESC" "$NAME"
    if running ;  then
      log_progress_msg "running"
      log_end_msg 0
    else
      log_progress_msg "apparently not running"
      log_end_msg 1
      exit 3
    fi
    ;;
  *)
    echo "Usage: /etc/init.d/$NAME {start|stop|restart|status}" >&2
    exit 1
    ;;
esac

exit 0
